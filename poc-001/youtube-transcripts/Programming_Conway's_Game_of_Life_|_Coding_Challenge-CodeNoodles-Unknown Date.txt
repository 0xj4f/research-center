hello everyone and welcome to another coding challenge in this episode i want to experiment with cell simulation by making conway's game of life to start off let's imagine a grid and it can be any size we like each square in our grid will represent a cell and each cell can either be dead or alive we will represent cells that are alive as a white square and dead cells will be empty let's run through the rules of conway's game of life before we begin to program if we look at one specific cell on our grid and count up the number of alive cells at the sides and diagonals from it we can apply a few basic rules to the cell the first rule is that if a live cell has less than two living neighbors then it dies this is to simulate underpopulation rule two is that if exactly two or three neighbors are alive then the cell will continue to the next generation rule three is that if a live cell has more than three living neighbors then it will die to simulate overpopulation and the last rule is that if a dead cell has exactly three living neighbor cells then it will come alive this simulates reproduction and it keeps the simulation going having all of that out of the way now it's time to implement the simulation in code to start off i will create a class to describe each one of the squares in our grid and i will call it cell this class will be relatively simple and it will store a boolean to describe whether the cell is currently alive or not i will also make a private variable that will store whether the cell will be alive or not in the next frame because when we update our cells we want them to be in sync with each other so this variable will be used to update all of the cells at once i then made a grid class to store all of our cells and we can access it and modify any cell with the get cell method since our grid acts as a two-dimensional array the getcell method takes in an x and a y position now to implement the rules we went over i created a method in the cell class called update and this is what it looks like these two for loops up here count the number of living cells surrounding the current cell and our rules are applied down here when i implemented this code though i quickly realized that something was wrong because every time i ran the simulation the cells immediately died out i then realized that in my for loops condition these two less than signs should have been less than or equal to signs because it was only counting the first three cells around the sides instead of eight once i fix this bug the simulation starts to resemble what i want and after some cleaning up of the code i now have a working simulation and i will show you some of the interesting patterns that can arise in conway's game of life the first and most simple kind of pattern that can arise is known as a still life still life's utilized the second rule of our simulation that if a live cell has two or three living neighbors then it remains unchanged so still lives remain unchanged as the generations go by most of the time these shapes will form once the simulation has essentially died out after many generations the next kind of pattern is known as an oscillator an oscillator cycles between multiple shapes before returning back to its original state and position to start the cycle over again this oscillator is very simple but the more cells that are involved the more complex the behavior becomes [Music] the last pattern is known as a spaceship and as you might expect a spaceship moves through the grid but it maintains its original size and shape so it is very similar to an oscillator except that it moves these patterns can combine together to create even more complex behavior like this this is known as a gospel glider gun and it has an oscillating pattern that generates spaceships from it known as gliders it's fascinating to me that such complex and lifelike shapes and patterns can arise from such simple rules the best way to find new patterns is to just mess around by placing random cells around and seeing what happens but right now when our cells die they immediately disappear but i'm curious what would happen if instead of them just disappearing they faded away instead so i added a variable to the cell class to track how long a cell has been dead after done and when i render the cell i now make the white color a gradient instead the results are quite spectacular looking to say the least [Music] [Music] my favorite are the spaceships because they leave behind a trail that almost looks like the trails that airplanes leave behind now since my simulation has an adjustable grid size i can make the grid really big at the expense of my computer so enjoy some of this higher resolution footage of the simulation [Music] [Music] [Music] [Music] [Music] [Music] you